
///////////////////////////////////////////////////////////////////////////////////////////////////
// Buildscript
///////////////////////////////////////////////////////////////////////////////////////////////////

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id 'org.jetbrains.intellij' version "0.1.9"
    id 'de.undercouch.download' version "2.1.0"
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Projects
///////////////////////////////////////////////////////////////////////////////////////////////////

allprojects {

    // IntelliJ plugin configuration

    apply plugin: 'org.jetbrains.intellij'
    apply plugin: 'de.undercouch.download'

    intellij {
        pluginName 'intellij-rust'

        version ideaVersion
        downloadSources Boolean.valueOf(downloadIdeaSources)
        // FIXME: hack to support both IDEA 15 and IDEA 16.
        // See https://github.com/intellij-rust/intellij-rust/issues/243
        updateSinceUntilBuild = false

        publish {
            username publishUsername
            password publishPassword
            channel publishChannel
        }

        sandboxDirectory project.rootDir.canonicalPath + "/.sandbox"
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    sourceSets {
        main.java.srcDirs += "gen"
    }

    test {
        useJUnit {
            excludeCategories 'org.rust.Performance'
        }
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat = 'full'
        }
    }

    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/jetbrains/markdown' }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-runtime:$kotlinVersion"
        compile "org.jetbrains:markdown:0.1.12"

        testCompile "junit:junit:4.+"
        testCompile 'org.assertj:assertj-core:3.2.0'
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// IDE support
///////////////////////////////////////////////////////////////////////////////////////////////////

apply plugin: 'idea'

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }

    module {
        generatedSourceDirs += file('gen')
        excludeDirs += file('.sandbox')
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Tasks
///////////////////////////////////////////////////////////////////////////////////////////////////

def lexerConfig(src, dst, lexerFileName) {
    return {
        classpath = files('lib/jflex/jflex-1.7.0-SNAPSHOT.jar')
        main = "jflex.Main"

        args = ["--skel",   'lib/jflex/idea-flex.skeleton',
                "-d",       dst,
                src
        ]

        inputs  .file   file(src)
        outputs .dir    file(dst + lexerFileName)
    }
}

task generateRustLexer(type: JavaExec) {
    configure lexerConfig(
        "src/main/kotlin/org/rust/lang/core/lexer/RustLexer.flex",
        "gen/org/rust/lang/core/lexer/",
        "_RustLexer.java"
    )
}

task generateRustDocHighlightingLexer(type: JavaExec) {
    configure lexerConfig(
        "src/main/kotlin/org/rust/lang/doc/lexer/RustDocHighlightingLexer.flex",
        "gen/org/rust/lang/doc/lexer/",
        "_RustDocHighlightingLexer.java"
    )
}

task generateRustPsiAndParser(type: JavaExec) {
    doFirst {
        delete file("gen/org/rust/lang/core/psi/")
    }
    ext.src     = "src/main/kotlin/org/rust/lang/core/grammar/rust.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [ dstRoot, file(src) ]

    inputs  .file   file(src)
    outputs .dir    fileTree(dir: dstRoot + '/org/rust/lang/core/', include: '**/*.java')

    classpath (configurations.compile + files('lib/grammar-kit.jar'))
}

task generate {
    dependsOn generateRustLexer, generateRustDocHighlightingLexer, generateRustPsiAndParser
}

compileKotlin.dependsOn generate
compileTestKotlin.dependsOn generate

task downloadRustSources(type: de.undercouch.gradle.tasks.download.Download) {
    overwrite false
    src 'https://github.com/rust-lang/rust/archive/1.10.0.zip'
    dest new File(projectDir, "src/test/resources/rustc-src.zip")
}

test.dependsOn downloadRustSources

task performanceTest(type: Test, group: 'Verification', dependsOn: [classes, testClasses, downloadRustSources]) {
    useJUnit {
        includeCategories 'org.rust.Performance'
        reports.html.destination = "$buildDir/reports/performanceTests"
    }

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }

    outputs.upToDateWhen { false } // always execute task, even if already executed.
}

check.dependsOn performanceTest

///////////////////////////////////////////////////////////////////////////////////////////////////
// Misc
///////////////////////////////////////////////////////////////////////////////////////////////////

version = "$version.$buildNumber" + (publishChannel?.trim() ? "-$publishChannel" : "")
